// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MyMooToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MyMooToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MyMooToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MyMooToken", id.toString(), this);
    }
  }

  static load(id: string): MyMooToken | null {
    return changetype<MyMooToken | null>(store.get("MyMooToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (!value) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(<string>value));
    }
  }

  get used(): i32 {
    let value = this.get("used");
    return value!.toI32();
  }

  set used(value: i32) {
    this.set("used", Value.fromI32(value));
  }

  get startingBalance(): BigInt {
    let value = this.get("startingBalance");
    return value!.toBigInt();
  }

  set startingBalance(value: BigInt) {
    this.set("startingBalance", Value.fromBigInt(value));
  }

  get balanceNow(): BigInt {
    let value = this.get("balanceNow");
    return value!.toBigInt();
  }

  set balanceNow(value: BigInt) {
    this.set("balanceNow", Value.fromBigInt(value));
  }

  get isStaked(): boolean {
    let value = this.get("isStaked");
    return value!.toBoolean();
  }

  set isStaked(value: boolean) {
    this.set("isStaked", Value.fromBoolean(value));
  }

  get stakeCount(): i32 {
    let value = this.get("stakeCount");
    return value!.toI32();
  }

  set stakeCount(value: i32) {
    this.set("stakeCount", Value.fromI32(value));
  }

  get stakeTimeStamp(): BigInt {
    let value = this.get("stakeTimeStamp");
    return value!.toBigInt();
  }

  set stakeTimeStamp(value: BigInt) {
    this.set("stakeTimeStamp", Value.fromBigInt(value));
  }
}
